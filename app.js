// ============================================
// UI FUNCTIONS
// ============================================
const API_URL = 'http://localhost:8080/api';
// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
function checkAuth() {
    const token = localStorage.getItem('token');
    const authStatus = document.getElementById('auth-status');
    const loginForm = document.getElementById('login-form');
    
    if (token) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
        fetch('http://localhost:8080/api/auth/verify', {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                authStatus.innerHTML = `
                    <div style="color: green;">
                        ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: ${data.user.fullName} (${data.user.role})
                        <button onclick="logout()" style="margin-left: 10px; padding: 4px 8px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">
                            –í–∏–π—Ç–∏
                        </button>
                    </div>
                `;
                loginForm.style.display = 'none';
            } else {
                // –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π
                localStorage.removeItem('token');
                showLoginForm();
            }
        })
        .catch(() => {
            showLoginForm();
        });
    } else {
        showLoginForm();
    }
}

function showLoginForm() {
    const authStatus = document.getElementById('auth-status');
    const loginForm = document.getElementById('login-form');
    
    authStatus.innerHTML = '<div style="color: orange;">‚ö†Ô∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º—É—Ç—å—Å—è –≤ –ë–î.</div>';
    loginForm.style.display = 'block';
}

async function quickLogin() {
    const username = document.getElementById('login-username')?.value;
    const password = document.getElementById('login-password')?.value;
    
    if (!username || !password) {
        alert('–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å');
        return;
    }
    
    try {
        const response = await fetch('http://localhost:8080/api/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
        });
        
        const data = await response.json();
        
        if (data.success) {
            localStorage.setItem('token', data.token);
            alert('‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!');
            checkAuth(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        } else {
            alert('‚ùå ' + data.error);
        }
    } catch (error) {
        console.error('Login error:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: ' + error.message);
    }
}

function logout() {
    localStorage.removeItem('token');
    alert('‚úÖ –í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏');
    checkAuth();
}

// –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    checkAuth();
});
function toHex(value) {
    try {
        const str = typeof value.toString === 'function' 
            ? value.toString() 
            : String(value);
        const bigIntValue = BigInt(str);
        const hex = '0x' + bigIntValue.toString(16);
        console.log(`   toHex: ${str.substring(0, 20)}... -> ${hex.substring(0, 20)}...`);
        return hex;
    } catch (error) {
        console.error('toHex error:', error);
        throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ hex: ${error.message}`);
    }
}
function getAuthToken() {
    return localStorage.getItem('authToken');
}

function getUserRole() {
    return localStorage.getItem('userRole');
}

function getUsername() {
    return localStorage.getItem('username');
}

async function apiRequest(url, options = {}) {
    const token = getAuthToken();
    
    const headers = {
        'Content-Type': 'application/json',
        ...options.headers
    };
    
    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
    }
    
    try {
        const response = await fetch(`${API_URL}${url}`, {
            ...options,
            headers
        });
        
        if (response.status === 401) {
            localStorage.clear();
            window.location.href = 'login.html';
            return null;
        }
        
        return await response.json();
    } catch (error) {
        console.error('API request error:', error);
        throw error;
    }
}

function generatePatientID(passport, medicalCard) {
    const combined = passport + medicalCard;
    const patientID = ethers.keccak256(ethers.toUtf8Bytes(combined));
    console.log('üÜî Generated Patient ID:', patientID);
    return patientID;
}

function switchTab(tabName) {
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach(content => content.classList.remove('active'));

    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => tab.classList.remove('active'));

    document.getElementById(tabName).classList.add('active');

    if (event && event.target) {
        event.target.classList.add('active');
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
async function initializeSystem() {
    const initButton = document.querySelector('button[onclick="initializeSystem()"]');
    const loadingSpinner = document.getElementById('init-loading');

    if (initButton) initButton.disabled = true;
    if (loadingSpinner) loadingSpinner.style.display = 'inline-block';
    if (initButton) initButton.innerHTML = '<span class="loading"></span> –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è...';

    try {
        console.log('=== –ü–û–ß–ê–¢–û–ö –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á ===');
        
        // –ö—Ä–æ–∫ 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Paillier –∫–ª—é—á—ñ–≤
        console.log('üîë –ö—Ä–æ–∫ 1/2: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Paillier –∫–ª—é—á—ñ–≤...');
        const keysGenerated = initializePaillierKeys();
        if (!keysGenerated) {
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ Paillier –∫–ª—é—á—ñ");
        }
        
        // –ö—Ä–æ–∫ 2: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–ª–æ–∫—á–µ–π–Ω—É
        console.log('‚õìÔ∏è –ö—Ä–æ–∫ 2/2: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–ª–æ–∫—á–µ–π–Ω—É...');
        const blockchainConnected = await initializeBlockchain();
        if (!blockchainConnected) {
            throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–ª–æ–∫—á–µ–π–Ω—É");
        }
        
        updateSystemStatus();
        showAlert('success', '‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!');
        
        await diagnoseContractConnection();
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
        showAlert('error', `‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ${error.message}`);
    } finally {
        if (initButton) initButton.disabled = false;
        if (loadingSpinner) loadingSpinner.style.display = 'none';
        if (initButton) initButton.innerHTML = '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É';
    }
}

function showAlert(type, message) {
    const existingAlerts = document.querySelectorAll('.alert');
    existingAlerts.forEach(alert => alert.remove());
    
    const alert = document.createElement('div');
    alert.className = `alert alert-${type}`;
    alert.innerHTML = message;
    alert.style.marginTop = '15px';
    
    const content = document.querySelector('.container');
    if (content) {
        content.insertBefore(alert, content.firstChild);
    }
    
    setTimeout(() => alert.remove(), 5000);
}

function updateSystemStatus() {
    const blockchainStatus = document.getElementById('blockchain-status');
    if (blockchainStatus) {
        blockchainStatus.textContent = '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ';
        blockchainStatus.className = 'badge badge-success';
    }
    
    const keysStatus = document.getElementById('keys-status');
    if (keysStatus) {
        keysStatus.textContent = '–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ';
        keysStatus.className = 'badge badge-success';
    }
    
    const contractStatus = document.getElementById('contract-status');
    if (contractStatus) {
        contractStatus.textContent = '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ';
        contractStatus.className = 'badge badge-success';
    }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–∞—Ü—ñ—î–Ω—Ç–∞
async function storePatientData(event) {
    event.preventDefault();
    
    const passport = document.getElementById('passport')?.value;
    const medicalCard = document.getElementById('medicalCard')?.value;
    const height = parseFloat(document.getElementById('height')?.value);
    const weight = parseFloat(document.getElementById('weight')?.value);
    
    // ‚úÖ –î–û–î–ê–ô–¢–ï –¶–ï:
    const initialSessions = parseInt(document.getElementById('initialSessions')?.value || '0');

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!passport || !medicalCard || isNaN(height) || isNaN(weight)) {
        showAlert('error', '‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ');
        return;
    }
    
    // ‚úÖ –î–û–î–ê–ô–¢–ï –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –¥–ª—è —Å–µ—Å—ñ–π:
    if (isNaN(initialSessions) || initialSessions < 0) {
        showAlert('error', '‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π –º–∞—î –±—É—Ç–∏ >= 0');
        return;
    }

    if (!passport || !medicalCard || isNaN(height) || isNaN(weight)) {
        showAlert('error', '‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ');
        return;
    }

    if (height < 50 || height > 250) {
        showAlert('error', '‚ùå –í–∏—Å–æ—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ 50-250 —Å–º');
        return;
    }

    if (weight < 10 || weight > 300) {
        showAlert('error', '‚ùå –í–∞–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ 10-300 –∫–≥');
        return;
    }

    const regBtn = document.getElementById('reg-btn');
    const loadingSpinner = document.getElementById('reg-loading');
    
    if (regBtn) regBtn.disabled = true;
    if (loadingSpinner) loadingSpinner.style.display = 'inline-block';
    if (regBtn) regBtn.innerHTML = '<span class="loading"></span> –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è...';

    try {
        // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if (!globalPublicKey || !globalPrivateKey || !contract) {
            throw new Error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
        }

        const patientIDBytes32 = generatePatientID(passport, medicalCard);
        console.log('üÜî Patient ID:', patientIDBytes32);

        // 2. –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ Paillier –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ Paillier...');
        const paillierParams = await contract.getPaillierParams();
        
        if (paillierParams[0].toString() === '0') {
            console.log('‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ Paillier –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ! –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ...');
            
            const nHex = '0x' + BigInt(globalPublicKey.n.toString()).toString(16);
            const nSquaredHex = '0x' + BigInt(globalPublicKey._n2.toString()).toString(16);
            const gHex = '0x' + BigInt(globalPublicKey.g.toString()).toString(16);
            
            console.log('–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ Paillier...');
            const setParamsTx = await contract.setPaillierParams(
                nHex,
                nSquaredHex,
                gHex,
                { gasLimit: 200000 }
            );
            
            console.log('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤...');
            await setParamsTx.wait();
            console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ Paillier –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ');
        } else {
            console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ Paillier –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
        }

        // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–∞—Ü—ñ—î–Ω—Ç —ñ—Å–Ω—É—î
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–∞—Ü—ñ—î–Ω—Ç —ñ—Å–Ω—É—î...');
        const exists = await contract.patientExists(patientIDBytes32);
        if (exists) {
            throw new Error('–ü–∞—Ü—ñ—î–Ω—Ç –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π');
        }
        console.log('‚úÖ –ü–∞—Ü—ñ—î–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î, –º–æ–∂–Ω–∞ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏');

        // 4. –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
    console.log('\n=== –®–ò–§–†–£–í–ê–ù–ù–Ø ===');
    console.log('Height:', height, '—Å–º');
    console.log('Weight:', weight, '–∫–≥');
    console.log('Initial sessions:', initialSessions); 

    const heightEncrypted = globalPublicKey.encrypt(height);
    const weightEncrypted = globalPublicKey.encrypt(weight);
    const sessionsEncrypted = globalPublicKey.encrypt(initialSessions);  

        // 5. –¢–µ—Å—Ç —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
        const heightTest = globalPrivateKey.decrypt(heightEncrypted);
        const weightTest = globalPrivateKey.decrypt(weightEncrypted);
        
        console.log('‚úÖ –¢–µ—Å—Ç: Height:', heightTest, 'Weight:', weightTest);

        if (Math.abs(heightTest - height) > 0.1 || Math.abs(weightTest - weight) > 0.1) {
            throw new Error('–ü–æ–º–∏–ª–∫–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è');
        }

        // 6. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ hex
        console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ hex...');
        const heightHex = toHex(heightEncrypted);
        const weightHex = toHex(weightEncrypted);
        const sessionsHex = toHex(sessionsEncrypted);

        console.log('Height hex:', heightHex.substring(0, 20) + '...');
        console.log('Weight hex:', weightHex.substring(0, 20) + '...');
        console.log('Sessions hex:', sessionsHex.substring(0, 20) + '...');

        // 7. –ó–ú–Ü–ù–ï–ù–û: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–º gasLimit
        console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –±–ª–æ–∫—á–µ–π–Ω...');
        const tx = await contract.storePatientData(
            patientIDBytes32,
            heightHex,
            weightHex,
            sessionsHex,
            { gasLimit: 500000 }  // ‚úÖ –î–û–î–ê–ù–û —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π gasLimit
        );

        console.log('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...');
        const receipt = await tx.wait();
        
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!');
        console.log('TX Hash:', receipt.hash);
        console.log('Block:', receipt.blockNumber);

        showPatientInfo(patientIDBytes32, passport, medicalCard, height, weight);
        showAlert('success', '‚úÖ –ü–∞—Ü—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!');

        // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
        document.getElementById('passport').value = '';
        document.getElementById('medicalCard').value = '';
        document.getElementById('height').value = '';
        document.getElementById('weight').value = '';

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
        let errorMsg = error.message;
        
        if (error.code === 'ACTION_REJECTED') {
            errorMsg = '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º';
        } else if (error.message.includes('insufficient funds')) {
            errorMsg = '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –≥–∞–º–∞–Ω—Ü—ñ';
        } else if (error.message.includes('Patient already exists')) {
            errorMsg = '–ü–∞—Ü—ñ—î–Ω—Ç –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ';
        } else if (error.message.includes('Paillier params not set')) {
            errorMsg = '–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ Paillier –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.';
        }
        
        showAlert('error', `‚ùå ${errorMsg}`);
    } finally {
        if (regBtn) regBtn.disabled = false;
        if (loadingSpinner) loadingSpinner.style.display = 'none';
        if (regBtn) regBtn.innerHTML = '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏';
    }
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–∑–∏
async function calculateDose(event) {
    event.preventDefault();
    
    const passport = document.getElementById('calcPassport')?.value;
    const medicalCard = document.getElementById('calcMedicalCard')?.value;
    const doseCoefficient = parseFloat(document.getElementById('doseCoefficient')?.value);

    if (!passport || !medicalCard || isNaN(doseCoefficient)) {
        showAlert('error', '‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è');
        return;
    }

    const calcBtn = document.getElementById('calc-btn');
    const loadingSpinner = document.getElementById('calc-loading');
    
    if (calcBtn) calcBtn.disabled = true;
    if (loadingSpinner) loadingSpinner.style.display = 'inline-block';
    if (calcBtn) calcBtn.innerHTML = '<span class="loading"></span> –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫...';

    try {
        if (!globalPublicKey || !globalPrivateKey || !contract) {
            throw new Error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞");
        }

        const patientIDBytes32 = generatePatientID(passport, medicalCard);
        
        console.log('=== –†–û–ó–†–ê–•–£–ù–û–ö –î–û–ó–ò ===');
        console.log('Patient ID (bytes32):', patientIDBytes32);

        const patientExists = await contract.patientExists(patientIDBytes32);
        console.log('–ü–∞—Ü—ñ—î–Ω—Ç —ñ—Å–Ω—É—î:', patientExists);

        if (!patientExists) {
            throw new Error('–ü–∞—Ü—ñ—î–Ω—Ç –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –ø–∞—Ü—ñ—î–Ω—Ç–∞.');
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        const patientData = await contract.retrievePatientData(patientIDBytes32);
        const weightEncrypted = patientData[1];
        
        // –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ –≤–∞–≥—É
        const weight = Number(globalPrivateKey.decrypt(weightEncrypted));
        console.log('–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –≤–∞–≥–∞:', weight, '–∫–≥');
        
        if (weight <= 0 || isNaN(weight) || weight > 500) {
            throw new Error(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–≥–∏: ${weight}`);
        }

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –¥–æ–∑—É
        const result = await calculateDoseOnChain(patientIDBytes32, weight, doseCoefficient);

        if (result.success) {
            // –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
            const token = localStorage.getItem('token');
            console.log('üîë –¢–æ–∫–µ–Ω:', token ? '–Ñ' : '–ù–ï–ú–ê–Ñ');
            
            if (!token) {
                console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î');
                showAlert('warning', '‚ö†Ô∏è –î–æ–∑–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞, –∞–ª–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ (–ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è)');
            } else {
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
                console.log('üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∑–∏ –≤ –ë–î...');
                
                try {
                    const saveResponse = await fetch(`http://localhost:8080/api/patients/${patientIDBytes32}/dose`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({
                            doseEncrypted: result.doseEncryptedForDB, // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –¥–æ–∑–∞
                            doseDecrypted: parseFloat(result.calculatedDose), // –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –¥–æ–∑–∞
                            doseCoefficient: doseCoefficient,
                            txHash: null
                        })
                    });

                    if (!saveResponse.ok) {
                        const errorText = await saveResponse.text();
                        console.error('‚ùå HTTP –ø–æ–º–∏–ª–∫–∞:', saveResponse.status, errorText);
                        throw new Error(`HTTP ${saveResponse.status}: ${errorText}`);
                    }

                    const saveData = await saveResponse.json();
                    console.log('‚úÖ –î–æ–∑–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ë–î:', saveData);
                    
                } catch (dbError) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ë–î:', dbError);
                    showAlert('warning', '‚ö†Ô∏è –î–æ–∑–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞, –∞–ª–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ë–î: ' + dbError.message);
                }
            }
            
            showCalcResult(result, passport, medicalCard, doseCoefficient);
            showAlert('success', `‚úÖ –î–æ–∑–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞: ${result.calculatedDose} –º–≥ (BSA: ${result.bsa} –º¬≤)`);
        } else {
            showAlert('error', `‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: ${result.error}`);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:', error);
        showAlert('error', `‚ùå ${error.message}`);
    } finally {
        if (calcBtn) calcBtn.disabled = false;
        if (loadingSpinner) loadingSpinner.style.display = 'none';
        if (calcBtn) calcBtn.innerHTML = '–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏';
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ–π
async function updateSessions(event) {
event.preventDefault();

// –ü–ï–†–ï–í–Ü–†–ö–ê –†–û–õ–Ü (Nurse —Ç–∞ Doctor –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø)
const userRole = getUserRole();
if (userRole === 'Auditor') {
    showAlert('error', '‚ùå –ê—É–¥–∏—Ç–æ—Ä–∏ –Ω–µ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø—É –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ–π.');
    return;
}

const passport = document.getElementById('sessionPassport').value;
const medicalCard = document.getElementById('sessionMedicalCard').value;

if (!passport || !medicalCard) {
    showAlert('error', '‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è.');
    return;
}

const sessionBtn = document.getElementById('session-btn');
if (sessionBtn) sessionBtn.disabled = true;
if (sessionBtn) sessionBtn.innerText = '–û–Ω–æ–≤–ª–µ–Ω–Ω—è...';

try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    if (!globalPublicKey || !globalPrivateKey || !contract) {
        throw new Error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É'");
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ patientID
    const patientID = generatePatientID(passport, medicalCard);
    console.log('=== –û–ù–û–í–õ–ï–ù–ù–Ø –°–ï–°–Ü–ô ===');
    console.log('Patient ID:', patientID);

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω—ñ
    console.log('–í–∏–∫–ª–∏–∫ updateChemotherapySessionsOnChain...');
    const result = await updateChemotherapySessionsOnChain(patientID);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', result);

    if (result && result.success) {
        // –û–Ω–æ–≤–ª—é—î–º–æ –≤ –ë–î
        try {
            const dbResult = await apiRequest(`/patients/${patientID}/sessions`, {
                method: 'PUT',
                body: JSON.stringify({
                    sessionsEncrypted: result.newSessionsEncrypted,
                    txHash: result.txHash
                })
            });

            if (dbResult && dbResult.success) {
                console.log('‚úÖ –°–µ—Å—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î');
            }
        } catch (dbError) {
            console.error('DB session update error:', dbError);
        }

        // –î–û–î–ê–ù–û: –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
        showSessionResult(result, passport, medicalCard);
        showAlert('success', `‚úÖ –°–µ—Å—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ! –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${result.sessionsDecrypted}`);
    } else {
        // –Ø–∫—â–æ result.success === false –∞–±–æ result === null
        const errorMsg = result?.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è';
        showAlert('error', `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${errorMsg}`);
    }
} catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ:', error);
    showAlert('error', `‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
} finally {
    if (sessionBtn) {
        sessionBtn.disabled = false;
        sessionBtn.innerText = '–î–æ–¥–∞—Ç–∏ +1';
    }
}
}
/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞
 */
function showPatientInfo(result, patientID, passport, medicalCard, height, weight) {
    const resultDiv = document.getElementById('store-result');
    if (!resultDiv) {
        console.warn('Element #store-result not found');
        return;
    }
    
    resultDiv.style.display = 'block';
    resultDiv.innerHTML = `
        <div class="result">
            <h3>‚úÖ –ü–∞—Ü—ñ—î–Ω—Ç –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π</h3>
            
            <div class="result-item">
                <div class="result-label">Patient ID (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π)</div>
                <div class="result-value" style="font-size: 11px; word-break: break-all;">${patientID}</div>
            </div>
            
            <div class="result-item">
                <div class="result-label">–°—Ç–∞—Ç—É—Å</div>
                <div class="result-value" style="color: #155724;">üîí –î–∞–Ω—ñ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ</div>
            </div>
            
            <div class="result-item">
                <div class="result-label">TX Hash</div>
                <div class="result-value tx-hash" onclick="copyToClipboard('${result.txHash}')" title="–ö–ª—ñ–∫ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è">
                    ${result.txHash}
                    <span class="copy-icon">üìã</span>
                </div>
            </div>
            
            <div class="result-item">
                <div class="result-label">Block Number</div>
                <div class="result-value">${result.blockNumber || '-'}</div>
            </div>
        </div>
    `;
}
// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
function showStoreResult(result, passport, medicalCard, height, weight, sessions) {
    const resultDiv = document.getElementById('store-result');
    if (!resultDiv) return;
    
    const patientID = generatePatientID(passport, medicalCard);
    
    resultDiv.style.display = 'block';
    resultDiv.innerHTML = `
        <div class="result">
            <h3>‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–ª–æ–∫—á–µ–π–Ω—ñ</h3>
            <div class="result-item">
                <div class="result-label">Patient ID</div>
                <div class="result-value" style="font-size: 11px; word-break: break-all;">${patientID}</div>
            </div>
            <div class="result-item">
                <div class="result-label">–°—Ç–∞—Ç—É—Å</div>
                <div class="result-value" style="color: #155724;">üîí –î–∞–Ω—ñ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ</div>
            </div>
            <div class="result-item">
                <div class="result-label">TX Hash</div>
                <div class="result-value tx-hash" onclick="copyToClipboard('${result.txHash}')" title="–ö–ª—ñ–∫ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è">
                    ${result.txHash}
                    <span class="copy-icon">üìã</span>
                </div>
            </div>
        </div>
    `;
}

function showCalcResult(result, passport, medicalCard, doseCoefficient) {
    const resultDiv = document.getElementById('calc-result');
    if (!resultDiv) return;
    
    resultDiv.style.display = 'block';
    resultDiv.innerHTML = `
        <div class="result">
            <h3>‚úÖ –î–æ–∑–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞</h3>
            <div class="result-item">
                <div class="result-label">üíä –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –¥–æ–∑–∞</div>
                <div class="result-value" style="color: #155724; font-size: 28px; font-weight: bold;">${result.calculatedDose} –º–≥</div>
            </div>
            <div class="result-item">
                <div class="result-label">TX Hash</div>
                <div class="result-value tx-hash" onclick="copyToClipboard('${result.txHash}')" title="–ö–ª—ñ–∫ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è">
                    ${result.txHash}
                    <span class="copy-icon">üìã</span>
                </div>
            </div>
        </div>
    `;
}

function showSessionResult(result, passport, medicalCard) {
    const resultDiv = document.getElementById('session-result');
    if (!resultDiv) {
        console.warn('Element #session-result not found');
        return;
    }
    
    const patientID = generatePatientID(passport, medicalCard);
    
    resultDiv.style.display = 'block';
    resultDiv.innerHTML = `
        <div class="result">
            <h3>‚úÖ –°–µ—Å—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞</h3>
            <div class="result-item">
                <div class="result-label">Patient ID</div>
                <div class="result-value" style="font-size: 11px; word-break: break-all;">${patientID}</div>
            </div>
            <div class="result-item">
                <div class="result-label">–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π</div>
                <div class="result-value" style="color: #155724; font-size: 20px; font-weight: bold;">${result.sessionsDecrypted}</div>
            </div>
            <div class="result-item">
                <div class="result-label">TX Hash</div>
                <div class="result-value" style="font-size: 11px; word-break: break-all;">${result.txHash.substring(0, 30)}...</div>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        showAlert('success', '‚úÖ TX Hash —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
    }).catch(err => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:', err);
        showAlert('error', '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏');
    });
}

function logout() {
    localStorage.clear();
    window.location.href = 'login.html';
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
document.addEventListener('DOMContentLoaded', () => {
    console.log('=================================');
    console.log('Medical Data System');
    console.log('=================================');
    
    const authToken = getAuthToken();
    const username = getUsername();
    const userRole = getUserRole();
    
    if (!authToken) {
        console.log('‚ùå –ù–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ');
        window.location.href = 'login.html';
    } else {
        console.log('‚úÖ –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ');
        console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:', username);
        console.log('–†–æ–ª—å:', userRole);
    }
});